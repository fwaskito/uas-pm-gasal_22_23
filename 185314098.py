# -*- coding: utf-8 -*-
"""185314098.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kBQidF8MBaWxaxZjrLFflPUss5PTkMib

- **Project**: UAS Pembelajaran Mesin
- **Created**: Sun, 18th Dec 2022 1:15:24 PM
- **Author**: F. Waskito
- **Reference**: Randerson. (July 12, 2019). *Classifiy Images Using Convolutional Neural Network & Python*. Medium.com. [link](https://randerson112358.medium.com/classify-images-using-convolutional-neural-networks-python-a89cecc8c679)

***

**Impor pustaka yang dibutuhkan**
"""

# Impor pustaka yang dibutuhkan
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from keras import layers
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
import os

plt.style.use('ggplot')

"""***Outset***"""

# Tensorflow flag (Log all messages except INFO and WARNING)
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# Mengetahui current working directory
os.getcwd()

"""***Load data***"""

from keras.datasets import cifar10
# Pre-packaged dataset cifar10 
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

"""### **Analisis Data**

**Menampilkan tipe data dari sampel latih dan uji**
"""

print('X_train type:', type(X_train))
print('y_train type:', type(y_train))
print('X_test type:', type(X_test))
print('y_test type:', type(y_test))

"""**Menampilkan *shape* dari sampel latih dan uji**"""

print('X_train shape:', X_train.shape)
print('y_train shape:', y_train.shape)
print('X_test shape:', X_test.shape)
print('y_test shape:', y_test.shape)

"""**Menelusuri salah satu citra**"""

index = 13

print(X_train[index])  # citra urutan ke-14 pada sampel latih

# Menampilkan citra sebelumnya secara visual
img = plt.imshow(X_train[index])

# Mengetahui label (bertipe kategorik-numerik) dari citra
print('The image label is: ', y_train[index])

# Buat representasi label terhadap kelas (kategorik-string)
label_classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 
                'dog', 'frog', 'horse', 'ship', 'truck']

print('Number ', 'class')
print('-------------------------')
for i in range(len(label_classes)):
    print(str(i).ljust(7), str(label_classes[i]).ljust(5))

# Tampilkan kelas dari citra sebelumnya
print('The image class is: ', label_classes[y_train[index][0]])

"""### **Praprosess**

***Label encoding* (dengan *one-hot encoding*)**
"""

y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

# Hasil encoding pada label sampel latih
print(y_train_one_hot)

# Hasil encoding dari label citra urutan ke-14 pada sampel latih
print('The one-hot label is: ', y_train_one_hot[index])

"""**Normalisasi Citra**"""

# nilai dan tipe data kanal sebelum normasisasi
print(X_train[index][0][0][0])
print(type(X_train[index][0][0][0]))

# ubah nilai citra pada sampel latih dan uji 
# dari interval [0,255] menjadi ke [0,1]
X_train = X_train / 255
X_test = X_test / 255

print(X_train)

# citra ke-14 setelah normalisasi
img = plt.imshow(X_train[index])

# nilai dan tipe data kanal setelah normasisasi
print(X_train[index][0][0][0])
print(type(X_train[index][0][0][0]))

"""### **Pemodelan**

**Bangun arsitektur *Convolutional Neural Network***
"""

model = Sequential()
# Convolutional and pooling layers
model.add(Conv2D(32, (5, 5), activation='relu', input_shape=(32, 32, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (5, 5), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
# Neural Network and dropout layers
model.add(Dense(1000, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(500, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(250, activation='relu'))
model.add(Dense(10, activation='softmax'))

print('Model summary:\n')
model.summary()

"""**Kompilasi model**"""

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

"""### **Pelatihan Model**"""

hist = model.fit(X_train, 
                 y_train_one_hot,
                 batch_size=256, 
                 epochs=10, 
                 validation_split=0.2)

"""### **Evaluasi Model**"""

# Evaluasi model tehadap sampel uji
accuracy = model.evaluate(X_test, y_test_one_hot)[1]

print('Accuracy score:', accuracy)

# Memvisualisasikan akurasi dari hasil pelatihan
plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

# Memvisualisasikan kerugian (loss) dari hasil pelatihan
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()

"""### **Pengujian Model dengan Citra Unggahan**

**Unggah citra uji jika menggunakan Google Colab**


from google.colab import files

uploaded = files.upload()
uploaded_file_name = list(uploaded.keys())[0]

print('\n> Isi current working directory:')
for file in os.listdir(os.getcwd()):
    print(file)
"""
"""**Uaggah citra uji jika menggunakan IDE lokal**"""

import shutil
import tkinter as tk
from tkinter import filedialog as fd

def upload_file():
    root = tk.Tk()
    root.wm_withdraw()
    curr_directory = os.getcwd()
    source_path = fd.askopenfilename(initialdir=curr_directory, 
                                    title="Select Image", 
                                    filetypes=[('Image Files', '*.jpg')])
    root.destroy()  # Tutup root Tkinter dialog

    uploaded_file_name = os.path.basename(source_path)
    uploaded_path = os.path.join(curr_directory, uploaded_file_name)
    shutil.copyfile(source_path, uploaded_path)

    return uploaded_file_name

uploaded_file_name = upload_file()

# Tampilkan isi current working directory terbaru
print('\n> Isi "cwd":')
for file in os.listdir(os.getcwd()):
    print(file)
"""
**Baca dan tampilkan citra uji unggahan**
"""

print(f'\nNama file citra unggahan: "{uploaded_file_name}" \n')
# Membaca file unggahan
new_image = plt.imread(uploaded_file_name)

# Tampilkan citra unggahan secara visual
img = plt.imshow(new_image)

"""**Transformasi citra uji unggahan**"""

from skimage.transform import resize
# Ubah ukuran citra sehingga sesuai dengan input layer pada model
resized_image = resize(new_image, (32, 32, 3))

img = plt.imshow(resized_image)

"""**Buat prediksi**"""

predictions = model.predict(np.array([resized_image]))

"""**Hasil prediksi**"""

predictions

# Urutkan probabilitas hasil prediksi yang berkesesuaian terhadap kelas
list_index = [0,1,2,3,4,5,6,7,8,9]
x = predictions

for i in range(10):
  for j in range(10):
    if x[0][list_index[i]] > x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i] = list_index[j]
      list_index[j] = temp

print(list_index)

# Tampilkan 5 kelas hasil prediksi dengan probabilitas tertinggi
for i in range(0, 5):
  print(label_classes[list_index[i]].ljust(10),':', 
        round(predictions[0][list_index[i]] * 100, 2),'%')

"""### **Pengujian Model dengan Citra pada Sampel Uji Cifar10**

**1. Pengujian data tunggal**
"""

import random
# Ambil citra uji secara acak
rand_test_index = random.randint(0, len(X_test))
rand_test_image = X_test[rand_test_index]
rand_test_class = label_classes[y_test[rand_test_index][0]]

print('\nThe random index of the test image is:', rand_test_index)
print('The actual class of the test image is:', rand_test_class, '\n')
img = plt.imshow(rand_test_image)

"""Buat prediksi"""

rand_test_image = np.reshape(rand_test_image, (1, 32, 32, 3))

predictions = model.predict(rand_test_image)

"""Hasil prediksi"""

predictions

# Urutkan probabilitas hasil prediksi dari terbesar ke terkecil
list_index = [0,1,2,3,4,5,6,7,8,9]
x = predictions

for i in range(10):
  for j in range(10):
    if x[0][list_index[i]] > x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i] = list_index[j]
      list_index[j] = temp

print(list_index)

# Tampilkan 5 kelas hasil prediksi dengan probabilitas tertinggi
for i in range(0, 5):
  print(label_classes[list_index[i]].ljust(10),':', 
        round(predictions[0][list_index[i]] * 100, 2),'%')

"""**2. Pengujian seluruh data uji**

Buat prediksi
"""

predictions = model.predict(X_test)

"""Hasil Prediksi"""

# Untuk setiap satu hasil prediksi, ambil label prediksi pada indeks
# berkesesuaian yang memiliki probabilitas tertinggi
y_predict = []
for probabilities in predictions:
  y_predict.append(np.argmax(probabilities))

from sklearn import metrics as mr

print('Number of test images:', len(X_test))
print('\nConfusion matrix:\n', mr.confusion_matrix(y_test, y_predict))
print('\nClassification report:\n',
      mr.classification_report(y_test, y_predict))

"""***

**Simpan Model**
"""

model.save('model/185314098_cnn_model.h5')

print('> Isi "cwd/model":')
for file in os.listdir(os.getcwd()+"/model"):
    print(file)